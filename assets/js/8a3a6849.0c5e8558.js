"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[533],{708:(e,r,i)=>{i.r(r),i.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var n=i(4848),t=i(8453);const s={},c="FilterOperationType",l={id:"enums/FilterOperationType",title:"FilterOperationType",description:"The FilterOperationType enum is used to filter the data in the database. Since the filter uses the module @chax-at/prisma-filter, the filter type is the same as the one used in the module.",source:"@site/docs/enums/FilterOperationType.md",sourceDirName:"enums",slug:"/enums/FilterOperationType",permalink:"/strata-backend-docs/enums/FilterOperationType",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"enumsSidebar"},d={},o=[{value:"Filter types",id:"filter-types",level:2},{value:"Filter value types",id:"filter-value-types",level:2}];function a(e){const r={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"filteroperationtype",children:"FilterOperationType"}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"FilterOperationType"})," enum is used to filter the data in the database. Since the filter uses the module ",(0,n.jsx)(r.code,{children:"@chax-at/prisma-filter"}),", the filter type is the same as the one used in the module."]}),"\n",(0,n.jsxs)(r.admonition,{type:"note",children:[(0,n.jsxs)(r.mdxAdmonitionTitle,{children:["Extracted from the ",(0,n.jsx)(r.code,{children:"@chax-at/prisma-filter"})," ",(0,n.jsx)(r.a,{href:"https://github.com/chax-at/prisma-filter/blob/main/README.md",children:"documentation"})]}),(0,n.jsx)(r.h2,{id:"filter-types",children:"Filter types"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Eq"}),", ",(0,n.jsx)(r.code,{children:"Ne"})," checks for strict (in)equality. Used for numbers and booleans."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"EqString"}),", ",(0,n.jsx)(r.code,{children:"NeString"})," string (in)equality check for strings. Does not convert numbers or booleans unlike ",(0,n.jsx)(r.code,{children:"Eq"})," and ",(0,n.jsx)(r.code,{children:"Ne"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Lt"}),", ",(0,n.jsx)(r.code,{children:"Lte"}),", ",(0,n.jsx)(r.code,{children:"Gt"}),", ",(0,n.jsx)(r.code,{children:"Gte"})," is used to filter numbers by checking whether they are greater/less than (or equal to) the value"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"Contains"})," is transformed into a Prisma ",(0,n.jsx)(r.code,{children:"contains"}),", used to filter for strings. Use ",(0,n.jsx)(r.code,{children:"%"})," as a wildcard, e.g. ",(0,n.jsx)(r.code,{children:"%Max%"})," to find partial matches."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"IContains"})," is like ",(0,n.jsx)(r.code,{children:"Contains"})," but case-insensitive"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"StartsWith"}),", ",(0,n.jsx)(r.code,{children:"EndsWith"}),", ",(0,n.jsx)(r.code,{children:"Search"})," match the corresponding ",(0,n.jsx)(r.a,{href:"https://www.prisma.io/docs/reference/api-reference/prisma-client-reference#filter-conditions-and-operators",children:"Prisma operation"}),". Prefix these filters with ",(0,n.jsx)(r.code,{children:"I"})," if you want to filter case-insensitive (e.g. ",(0,n.jsx)(r.code,{children:"IStartsWith"}),")"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"In"})," checks whether the value is in the given numbers array. Use ",(0,n.jsx)(r.code,{children:"InStrings"})," for string arrays."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"InStrings"})," checks whether value is in the given string array."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"NotIn"})," checks whether the value is NOT in the given numbers array. Use ",(0,n.jsx)(r.code,{children:"NotInStrings"})," for string arrays."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"NotInStrings"})," checks whether value is NOT in the given string array."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"EqNull"}),", ",(0,n.jsx)(r.code,{children:"NeNull"})," checks whether the value is null or not null. Must be used instead of ",(0,n.jsx)(r.code,{children:"Eq"}),", ",(0,n.jsx)(r.code,{children:"Ne"})," because otherwise ",(0,n.jsx)(r.code,{children:"null"})," would be treated as string"]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"ArrayContains"}),", ",(0,n.jsx)(r.code,{children:"ArrayStartsWith"}),", ",(0,n.jsx)(r.code,{children:"ArrayEndsWith"})," can be used on ",(0,n.jsx)(r.a,{href:"https://www.prisma.io/docs/orm/reference/prisma-client-reference#array_contains",children:"Prisma arrays"})]}),"\n"]}),(0,n.jsx)(r.h2,{id:"filter-value-types",children:"Filter value types"}),(0,n.jsx)(r.p,{children:"Since the filter is transferred via query parameters, everything will be converted into a string. This library will\r\nautomatically convert the filter value following these rules:"}),(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["If the filter type is ",(0,n.jsx)(r.code,{children:"Eq"}),", ",(0,n.jsx)(r.code,{children:"Ne"})," and the value is 'true' or 'false', then it's converted into a boolean","\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["Use ",(0,n.jsx)(r.code,{children:"EqString"}),", ",(0,n.jsx)(r.code,{children:"NeString"})," if you want to filter strings and don't convert it"]}),"\n"]}),"\n"]}),"\n",(0,n.jsxs)(r.li,{children:["If the filter type is not ",(0,n.jsx)(r.code,{children:"Like"})," or ",(0,n.jsx)(r.code,{children:"...String"})," and the value is a number (or a number array for ",(0,n.jsx)(r.code,{children:"In"}),"), then it's converted into a number (or a number array)"]}),"\n",(0,n.jsx)(r.li,{children:"Otherwise, the value is treated as a string"}),"\n"]}),(0,n.jsxs)(r.p,{children:["For string filters, the ",(0,n.jsx)(r.code,{children:"Like"})," or ",(0,n.jsx)(r.code,{children:"Ilike"})," filter types are recommended since usually a partial search is required.\r\nBut if you want to use a different filter for strings, make sure to use the ",(0,n.jsx)(r.code,{children:"...String"})," variant of it, otherwise\r\n",(0,n.jsx)("a",{href:"https://twitter.com/racheltrue/status/1365461618977476610",children:"Rachel True"})," can't filter by her name."]})]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,r,i)=>{i.d(r,{R:()=>c,x:()=>l});var n=i(6540);const t={},s=n.createContext(t);function c(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);