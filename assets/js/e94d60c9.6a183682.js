"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[499],{8393:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=t(4848),i=t(8453);const o={sidebar_position:4},a="City",s={id:"docs/Localization/city",title:"City",description:"Filter by state and county",source:"@site/docs/docs/Localization/city.md",sourceDirName:"docs/Localization",slug:"/docs/Localization/city",permalink:"/strata-backend-docs/docs/Localization/city",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"County",permalink:"/strata-backend-docs/docs/Localization/county"},next:{title:"Organization",permalink:"/strata-backend-docs/category/organization"}},c={},d=[{value:"Filter by state and county",id:"filter-by-state-and-county",level:2},{value:"Find city by name",id:"find-city-by-name",level:2}];function l(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"city",children:"City"}),"\n",(0,r.jsx)(e.h2,{id:"filter-by-state-and-county",children:"Filter by state and county"}),"\n",(0,r.jsx)(e.p,{children:"We cannot return all cities, so we need to filter by state and county optionaly."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"query FindAllCitiesOfState($options: FilterDto) {\r\n    findAllStates(options: $options) {\r\n        items {\r\n            uuid\r\n            createdAt\r\n            updatedAt\r\n            name\r\n            description\r\n            countys {\r\n                items {\r\n                    uuid\r\n                    createdAt\r\n                    updatedAt\r\n                    name\r\n                    description\r\n                    citys {\r\n                        items {\r\n                            name\r\n                            uuid\r\n                        }\r\n                        totalCount\r\n                        hasNextPage\r\n                    }\r\n                }\r\n                totalCount\r\n                hasNextPage\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"For example, we can use the following options to filter the cities of Alaska."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\r\n  "options": {\r\n    "filter": [\r\n      {\r\n        "field": "name",\r\n        "type": "Eq",\r\n        "value": "Alaska"\r\n      }\r\n    ],\r\n    "limit": 100,\r\n    "offset": 0\r\n  }\r\n}\r\n\n'})}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["other fields can be used to filter the states, like ",(0,r.jsx)(e.code,{children:"uuid"})," and ",(0,r.jsx)(e.code,{children:"description"}),"."]})}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["The filter type can be found in the ",(0,r.jsx)(e.a,{href:"../../enums/FilterOperationType",children:"FilterOperationType"})," documentation."]})}),"\n",(0,r.jsx)(e.admonition,{type:"warning",children:(0,r.jsx)(e.p,{children:"The cities and counties are paginated, so we need to check if there are more pages to load."})}),"\n",(0,r.jsx)(e.h2,{id:"find-city-by-name",children:"Find city by name"}),"\n",(0,r.jsx)(e.p,{children:"Another option is to filter by city name."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-graphql",children:"query FindAllCities($options: FilterDto) {\r\n    findAllCitys(options: $options) {\r\n        hasNextPage\r\n        totalCount\r\n        items {\r\n            uuid\r\n            createdAt\r\n            updatedAt\r\n            name\r\n            description\r\n            county {\r\n                name\r\n            }\r\n        }\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:'For example, we can filter cities with names like "new y"'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",children:'{\r\n  "options": {\r\n    "filter": [\r\n      {\r\n        "field": "name",\r\n        "type": "Like",\r\n        "value": "new y"\r\n      }\r\n    ],\r\n    "limit": 100,\r\n    "offset": 0,\r\n    "order": [\r\n      {\r\n        "dir": "asc",\r\n        "field": "name"\r\n      }\r\n    ]\r\n  }\r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var r=t(6540);const i={},o=r.createContext(i);function a(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);